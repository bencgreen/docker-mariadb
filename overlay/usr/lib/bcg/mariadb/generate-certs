#!/usr/bin/with-contenv bash

set -euo pipefail


#======================================================================================================================
# Generate key and certificate.
#
# Arguments
#   1   Certificate name (e.g. 'Server' or 'Client')
#   2   Path to key
#   3   Key bits
#   4   Path to certificate
#======================================================================================================================

generate-request() {
    bcg-debug "generate-certs: generate-request() name=${1}"
    bcg-debug "generate-certs: generate-request() key file=${2}"
    bcg-debug "generate-certs: generate-request() key bits=${3}"
    bcg-debug "generate-certs: generate-request() certificate file=${4}"

    openssl req \
        -nodes \
        -keyout ${2} \
        -newkey rsa:${3} \
        -out ${4} \
        -subj "/C=NA/ST=NA/L=NA/O=NA/OU=NA/CN=MariaDB ${1}"
}


#======================================================================================================================
# Process RSA key.
#
# Arguments
#   1   Path to input key
#   2   Path to output key
#======================================================================================================================

process-key() {
    bcg-debug "generate-certs: process-key() input=${1}"
    bcg-debug "generate-certs: process-key() output=${2}"

    openssl rsa \
        -in ${1} \
        -out ${2}
    rm -f ${1}
}


#======================================================================================================================
# Sign a certificate using the generated authority.
#
# Arguments
#   1   Path to certificate request
#   2   Path to certificate
#======================================================================================================================

sign-cert() {
    bcg-debug "generate-certs: sign-cert() input=${1}"
    bcg-debug "generate-certs: sign-cert() output=${2}"

    openssl x509 \
        -req \
        -days ${DB_SSL_DAYS} \
        -in ${1} \
        -CA ${DB_SSL_CA_CERT} \
        -CAkey ${DB_SSL_CA_KEY} \
        -set_serial 01 \
        -out ${2}
    rm -f ${1}
}


#======================================================================================================================
# For the commands and the following sequence of commands,
# see https://www.cyberciti.biz/faq/how-to-setup-mariadb-ssl-and-secure-connections-from-clients/
#======================================================================================================================


#======================================================================================================================
# Ensure SSL directory exists.
#======================================================================================================================

[[ ! -d ${DB_SSL_CNF_D} ]] && mkdir -p ${DB_SSL_CNF_D}


#======================================================================================================================
# Generate CA key and certificate.
#======================================================================================================================

# generate CA key
bcg-echo "Generating CA key ${DB_SSL_CA_KEY}..."
openssl genrsa ${DB_SSL_CA_KEY_BITS} > ${DB_SSL_CA_KEY}
bcg-done

# generate CA certificate
bcg-echo "Generating CA certificate ${DB_SSL_CA_CERT}..."
openssl req \
    -x509 \
    -nodes \
    -days ${DB_SSL_DAYS} \
    -key ${DB_SSL_CA_KEY} \
    -out ${DB_SSL_CA_CERT} \
    -subj "/C=NA/ST=NA/L=NA/O=NA/OU=NA/CN=MariaDB Admin"
bcg-done


#======================================================================================================================
# Generate server key and certificate.
#======================================================================================================================

# generate server key and request
bcg-echo "Generating server key and request..."
generate-request "Server" ${DB_SSL_SERVER_KEY_TMP} "${DB_SSL_SERVER_KEY_BITS}" ${DB_SSL_SERVER_REQ}
bcg-done

# process server key
bcg-echo "Processing server key..."
process-key ${DB_SSL_SERVER_KEY_TMP} ${DB_SSL_SERVER_KEY}
bcg-done

# sign the server certificate
bcg-echo "Signing server certificate..."
sign-cert ${DB_SSL_SERVER_REQ} ${DB_SSL_SERVER_CERT}
bcg-done


#======================================================================================================================
# Generate client key and certificate.
#======================================================================================================================

# generate client key and request
bcg-echo "Generating client key and request..."
generate-request "Client" ${DB_SSL_CLIENT_KEY_TMP} "${DB_SSL_CLIENT_KEY_BITS}" ${DB_SSL_CLIENT_REQ}
bcg-done

# process client key
bcg-echo "Processing client key..."
process-key ${DB_SSL_CLIENT_KEY_TMP} ${DB_SSL_CLIENT_KEY}
bcg-done

# sign the server certificate
bcg-echo "Signing client certificate..."
sign-cert ${DB_SSL_CLIENT_REQ} ${DB_SSL_CLIENT_CERT}
bcg-done


#======================================================================================================================
# Verify client and server certificates.
#======================================================================================================================

bcg-echo "Verifying certificates..."
if openssl verify -CAfile ${DB_SSL_CA_CERT} ${DB_SSL_SERVER_CERT} ${DB_SSL_CLIENT_CERT} ; then
    bcg-done
    exit 0
fi


#======================================================================================================================
# Output error and clear directories.
#======================================================================================================================

bcg-error "generate-certs: Unable to verify SSL certificates, clearing SSL directory..."
rm -rf "${DB_SSL_CNF_D}/*"
bcg-done
